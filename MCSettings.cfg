//@PART[launchClamp1]
//{
	//mass = 10
//}
MISSIONCONTROLLER
{
	//CONSTANTS
	// Recycling costs
	fuelRecycle = 0.95
	splashedRecycle = 0.65
	landedRecycle = 0.85
	runwayRecycle = 0.95
	autoRecycle = 0.63 // this  multiplies runwayRecycle for final value
	// so autorecycle multiplier is really autoRecyel * runwayRecycle
	
	// Autorecycling:
		// parachutes
	parachuteDragPerTon = 70
		// rockets
	minRocketTWR = 1.5 // when the rocket is empty of rocket fuel, of course!
	deltaVRequired = 1000 // must have this must dV remaining for propulsive landing
		// jets
	jetIsp = 600 // must have Isp > this to be considered a jet.
	jetFuelMultiplier = 0.5 // uses thrust * this units of fuel to land, where TWR clamped at 1.0
	// so if TWR > 1.0, divide thrust by TWR first		
	
	// Financing
	
	// COSTING
	// cost is done as follows:
	// cost per crew (crewCapacity * costPerCrew) is added.
	// then the cost of each module is added (see below).
	// then the part's mass * massCost * mass cost mult is added
	// (mass cost mult starts per category, as below in CATERGORYMASSCOST, but can be modified
		// by modules; if it has a massCostMult, that's multiplied in to the running total mass cost mult.)
	// then for each resource the part has, res.maxAmount * RESOURCECOST[that resource].tank
	// is added.
	// finally, it's all multiplied by total cost mult (which starts as totalCostScalar).
	
	// for vessel cost, for each resource the vessel has, if there's a corresponding RESOURCECOST
		// entry, the resource amount * RESOURCECOST[resource].cost is added.

	massCost = 2800
	totalCostScalar = 1.0
	costPerCrew = 6000
	
	// LOANS are adjustable by player.  The following values below adjust the rates at which your mission payouts are subtracted from when borrowing 
	// money from the bank. Example:  10000 Payment * .75 = 7500 payment at end of mission.

	lowloan = 0.75 // -1 to -25000
	medloan = 0.50 // -25001 to -60000
	highloan = 0.25 // anything below -60001
	kerbalHireCost = 5000 // changes the cost to hire kerbals when MCE notices that you have a new kerbal on your Roster

	//payout levels-- mode0 (default mode before research) mode1 (1st research level) mode2 (2nd research level)
	payoutmode0 = 1  //this is default mode.  Reward * 1.. Change this if your not happy with MCE payout level... (no more complaining please)
	payoutmode1 = 1.2  //only used in career mode
	payoutmode2 = 1.4 //only used in career mode
	
	//fuelmode levels - decides what mission controller will charge with fuel cost. again now its editable please don't complain about cost anymore.
	fuelmode0 = .35 // default values used to start career mode and only value used in sandbox mode
	fuelmode1 = .25 // Only used in career mode for researched effiecient fuels.

	//contruction levels determin what you pay for construction of your vessels dry values. Read above about complaining.. Its editable now.. Feel free to change.
	construction0 = 1.0
	construction1 = .94
	construction2 = .84

	CATEGORYMASSCOSTMULT
	{
		Pods = 3.5
		Propulsion = 0.5
		Control = 0.8
		Structural = 0.8
		Aero = 3.0
		Utility = 3.7
		Science = 7.0
	}
	
	// the values below represent companies for contract type missions.  You can change the values, but cannot add any more companies due to the Weighted system that selects them in code.

	COMA
	{
		name = Kerlington Model Rockets and Paper Products Inc
		payout = 1.1
		science = 2.0
	}
	COMB
	{
		name = Kerbal X Space Research
		payout = .8
		science = 1.8
	}
	COMC
	{
		name = Kebello AeroSpace And Flight Dynamics
		payout = 1.4
		science = 1.0
	}
	COMD
	{
		name = STEADLER Engineering Corps
		payout = .5
		science = 1.7
	}	
	
	COME
	{
		name = Kerman Orbital Sciences Co.
		payout = 1.6
		science = 2.5	
	}
	
	COMF
	{
		name = Kerbal Scaled Composites
		payout = 1.8
		science = 1.3
	}
	COMG
	{
		name = Jebediah Kerman's Junkyard and Spaceship Parts Co
		payout = 1.1
		science = .7
	}
	COMH
	{
		name = Rockomax Conglomerate
		payout = 1.2
		science = 1.2
	}
	COMI
	{
		name = Probodobodyne Inc
		payout = 1.3
		science = 1.9
	}
		
	// in addition to changing the values here, you can:
	// add new modules with the following generic commands (just make sure the node name
		// matches the MODULE { name = X } in the part.cfg
	// or add the following generic commands to existing modules
	// the below aslo describes the order of operations.
	// FLOATS: any key/value pair under this subnode works as follows:
		// for each key in the subnode, find corresponding variable in the module.
		// multiply the value of the module's variable, by the value in the key/value pair in FLOATS
		// and add the sum to the module total cost.
		// example: for ModuleReactionWheel, if PitchTorque = y is under FLOATS
		// then the pitch torque of that reaction wheel, * y, will be added to the module cost.
	// (then special handling is done, to increase base module price)
	// effScalar, effPower: multiply final module cost by: ((cost * effScalar) to the effPower)
		// so that you can increase cost based on how efficient the part is.
	// costMult: then module cost is multiplied by costMult.
	// costAdd: then costAdd is added to module cost.
	// massCostMult: then part's mass cost mult is multiplied by this.
	// totalMassMult: then part's total mass mult is multiplied by this.
	
	MODULECOST
	{
		LaunchClamp
		{
			massCostMult = 0.1
			totalMult = 0.0001
			costAdd = -800
		}
		ModuleEngines
		{
			//special handling
			atmoRatio = 0.2
			ispOffset = 200
			power = 2
			scalar = 0.001
			gimbalFactor = 0.2
			
			// list propellants here, and what multiplier to apply if the engine uses them
			// (cumulative)
			Kerosene = 0.05
			IntakeAir = 0.05
			KIntakeAir = 0.07
			FSCoolant = 0.06
			SolidFuel = 0.05
			XenonGas = 1.0
			LqdMethane = 0.4
			Aluminium = 0.3			
			
			// if no propellant in above list found, and if IspV > 600  and V< 1999 The Nuke Mult Is applied, over 4999 and handed off to futureEngines.
			nukeMult = .5
			//This value is for Future type engines were ISP is over 2000.  Figure best way to handle this situation nomrmal engines usually don't go this high, but if they do can cause low cost
			//In engines that are only 1001-2000 ISP.
			futureEngines = .0007
			
			// end special handling
			effScalar = 0.00025
			effPower = 0.25
			
			costAdd = 50
			costMult = 0.5
		}
		ModuleEnginesFX
		{
			//special handling
			atmoRatio = 0.2
			ispOffset = 200
			power = 2
			scalar = 0.001
			gimbalFactor = 0.2
			
			// list propellants here, and what multiplier to apply if the engine uses them
			// (cumulative)
			Kerosene = 0.05
			IntakeAir = 0.05
			KIntakeAir = 0.07
			FSCoolant = 0.06
			SolidFuel = 0.05
			XenonGas = 1.0
			LqdMethane = 0.4
			Aluminium = 0.3			
			
			// if no propellant in above list found, and if IspV > 800  and V< 1999 The Nuke Mult Is applied, over 4999 and handed off to futureEngines.
			nukeMult = .9
			//This value is for Future type engines were ISP is over 2000.  Figure best way to handle this situation nomrmal engines usually don't go this high, but if they do can cause low cost
			//In engines that are only 1001-2000 ISP.
			futureEngines = .0007
			
			// end special handling
			effScalar = 0.00025
			effPower = 0.25
			
			costAdd = 50
			costMult = 0.5
		}
		ModuleRCS
		{
			//special handling
			atmoRatio = 0.01
			ispOffset = 200
			power = 2
			scalar = 0.05
			// end special handling
		}
		ModuleCommand
		{
			effScalar = 40
			effPower = 1.0
			costAdd = 1200
			massCostMult = 0.5
		}
		ModuleReactionWheel
		{
			FLOATS
			{
				PitchTorque = 5
				YawTorque = 5
				RollTorque = 5
			}
		}
		ModuleSAS
		{
			costAdd = 250
		}
		ModuleAnchoredDecoupler
		{
			costAdd = 10
			FLOATS
			{
				ejectionForce = 0.5
			}
		}
		ModuleDecouple
		{
			costAdd = 10
			FLOATS
			{
				ejectionForce = 0.5
			}
		}
		ModuleDockingNode
		{
			effScalar = 1
			effPower = 0.5
			costAdd = 250
			massCostMult = 2
		}
		ModuleLandingGear
		{
			massCostMult = 0.4
		}
		ModuleDeployableSolarPanel
		{
			FLOATS
			{
				chargeRate = 200
			}
		}
		ModuleGenerator
		{
			//special handling
			// for now, only charge for ElectricCharge generators with no inputs (HARD-CODED)
			// so this WHOLE MODULE will only apply in that case.
			// but you can still add the generic module key/values.
			
			effScalar = 245000
			effPower = 0.5
			//end special handling
		}
		ModuleEnviroSensor
		{
			costAdd = 100
		}
		repairStation
		{
			costAdd = 400
		}
		MultiModeEngine
		{
			costAdd =  500
		}
		ModuleScienceExperiment
		{
			costAdd= 1000
		}
		ModuleScienceLab
		{
			costAdd = 10000
		}
		AlcubierreDrive
		{
			costAdd = 120000
		}
		ElectricEngineController
		{
			costAdd = 1800
		}
		VistaEngineController
		{
			costAdd = -62000
		}
		MechJebAR202
		{
			costAdd = -4000000
		}
		DMMagBoomModule
		{
			costAdd = 800
		}
		DMRPWSModule
		{
			costAdd = 5000
		}
		DMScopeModule
		{
			costAdd = 3000
		}
		DMAnomalyScanner
		{
			costAdd = 1500
		}
		DMBioDrill
		{
			costAdd = 6000
		}
		DMLaserModule
		{
			costAdd = 8000
		}
		FlightEngineer
		{
			costAdd = 2000
		}
		OrbitResearchScan
		{
			costAdd = 2500
		}
		RoverScience
		{
			costAdd = 2500
		}
		ModuleParachute
		{
			costMult = .10
		}
		RealChuteModule
		{
			costMult = .10
		}
	}
	
	RESOURCECOST
	{
		//all cost per unit: cost applies to amount, tank to maxAmount
		AblativeShielding
		{
			cost = 4
			tank = 1
		}
		ElectricCharge
		{
			cost = 0.2
			tank = 1.0
		}
		LiquidFuel
		{
			cost = 2
			tank = 0.01
		}
		Oxidizer
		{
			cost = 5
			tank = 0.03
		}
		SolidFuel
		{
			cost = 2.5
			tank = 0.3
		}
		MonoPropellant
		{
			cost = 8 // as UDMH, should be 99 (!)
			tank = 1 // as UDMH, toxic.
		}
		XenonGas
		{
			cost = 5
			tank = 0.4
		}
		// MFS Fuels
		// actual cost per mT * 25
		// so way more than IRL, since K's are on the order of $1000
		LiquidOxygen
		{
			cost = 2
			tank = 3
		}
		LiquidH2
		{
			cost = 9
			tank = 4
		}
		N2O4
		{
			cost = 5 // should be 27
			tank = 1
		}
		MMH
		{
			cost = 25 // should be 300 if large-scale production; 2250 (!) in actuality
			// But as it's the MFSC standin for all hypergolic fuels, we consider 300.
			// (and divide by 6 as other hypergolics.)
			tank = 1
		}
		Hydrazine
		{
			cost = 14 // should be 1067 (!) in actuality, or 169 in large-scale prod.
			tank = 1
		}
		
		// Life Support
		Food
		{
			cost = 1
			tank = 0
		}
		Water
		{
			cost = 0.25
			tank = 0.1
		}
		Oxygen
		{
			cost = .5
			tank = .2 // scrubbers Fix for eclss values (higher values made prices out range)
		}
		O2 Candle
		(
			cost = 1
			tank = 0
		}
		
		// Intersteller Support Fuels
		UF4
		{
			cost = 10
			tank = 1			
		}
		ThF4
		{
			cost = 11
			tank = 1
		}
		Argon
		{
			cost = 0.5
			tank = 1
		}
		Aluminium
		{
			cost = 0.5
			tank = 1
		}
		LqdWater
		{
			cost = 0.25
			tank = 0.1
		}
		LqdMethane
		{
			cost = 0.7
			tank = 1
		}
		Helium-3
		{
			cost = 0.8
			tank = .055
		}
		Tritium
		{
			cost = 1
			tank = 0.5
		}
		//Near Future Fuels
		ArgonGas
		{
			cost = 0.05
			tank = 1
		}
		HydrogenGas
		{
			cost = 0.6
			tank = 1
		}
		EnrichedUranium
		{
			cost = 10
			tank = 1	
		}
		repairParts //new for MCE repair
		{
			cost = 7
			tank = 0
		}
		Argon.Gas
		{
			cost = 0.7
			tank = 1
		}
		Kethane
		{
			cost = 3.5
			tank = 1
		}	
	}			
}