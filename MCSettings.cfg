@PART[launchClamp1]
{
	mass = 10
}
MISSIONCONTROLLER
{
	// cost is done as follows:
	// cost per crew (crewCapacity * costPerCrew) is added.
	// then the cost of each module is added (see below).
	// then the part's mass * massCost * mass cost mult is added
	// (mass cost mult starts per category, as below in CATERGORYMASSCOST, but can be modified
		// by modules; if it has a massCostMult, that's multiplied in to the running total mass cost mult.)
	// then for each resource the part has, res.maxAmount * RESOURCECOST[that resource].tank
	// is added.
	// finally, it's all multiplied by total cost mult (which starts as totalCostScalar).
	
	// for vessel cost, for each resource the vessel has, if there's a corresponding RESOURCECOST
		// entry, the resource amount * RESOURCECOST[resource].cost is added.

	massCost = 700
	totalCostScalar = 1.0
	costPerCrew = 6000
	
	CATEGORYMASSCOSTMULT
	{
		Pods = 2
		Propulsion = 0.1
		Control = 0.1
		Structural = 0.1
		Aero = 2.0
		Utility = 2.0
		Science = 7.0
	}
	
	// in addition to changing the values here, you can:
	// add new modules with the following generic commands (just make sure the node name
		// matches the MODULE { name = X } in the part.cfg
	// or add the following generic commands to existing modules
	// the below aslo describes the order of operations.
	// FLOATS: any key/value pair under this subnode works as follows:
		// for each key in the subnode, find corresponding variable in the module.
		// multiply the value of the module's variable, by the value in the key/value pair in FLOATS
		// and add the sum to the module total cost.
		// example: for ModuleReactionWheel, if PitchTorque = y is under FLOATS
		// then the pitch torque of that reaction wheel, * y, will be added to the module cost.
	// (then special handling is done, to increase base module price)
	// effScalar, effPower: multiply final module cost by: ((cost * effScalar) to the effPower)
		// so that you can increase cost based on how efficient the part is.
	// costMult: then module cost is multiplied by costMult.
	// costAdd: then costAdd is added to module cost.
	// massCostMult: then part's mass cost mult is multiplied by this.
	// totalMassMult: then part's total mass mult is multiplied by this.
	
	MODULECOST
	{
		LaunchClamp
		{
			massCostMult = 0.1
		}
		ModuleEngines
		{
			//special handling
			atmoRatio = 0.2
			ispOffset = 200
			power = 2
			scalar = 0.001
			gimbalFactor = 0.2
			
			// list propellants here, and what multiplier to apply if the engine uses them
			// (cumulative)
			IntakeAir = 0.05
			KIntakeAir = 0.07
			FSCoolant = 0.06
			SolidFuel = 0.05
			XenonGas = 1.0
			
			// if no propellant in above list found, and if IspV > 600, apply this mult
			nukeMult = 2
			
			// end special handling
			effScalar = 0.00025
			effPower = 0.25
			
			costAdd = 250
			costMult = 0.5
		}
		ModuleRCS
		{
			//special handling
			atmoRatio = 0.01
			ispOffset = 200
			power = 2
			scalar = 0.05
			// end special handling
		}
		ModuleCommand
		{
			effScalar = 40
			effPower = 1.0
			costAdd = 1200
			massCostMult = 0.5
		}
		ModuleReactionWheel
		{
			FLOATS
			{
				PitchTorque = 5
				YawTorque = 5
				RollTorque = 5
			}
		}
		ModuleSAS
		{
			costAdd = 250
		}
		ModuleAnchoredDecoupler
		{
			costAdd = 10
			FLOATS
			{
				ejectionForce = 0.5
			}
		}
		ModuleDecouple
		{
			costAdd = 10
			FLOATS
			{
				ejectionForce = 0.5
			}
		}
		ModuleDockingNode
		{
			effScalar = 1
			effPower = 0.5
			costAdd = 250
			massCostMult = 2
		}
		ModuleLandingGear
		{
			massCostMult = 0.4
		}
		ModuleDeployableSolarPanel
		{
			FLOATS
			{
				chargeRate = 200
			}
		}
		ModuleGenerator
		{
			//special handling
			// for now, only charge for ElectricCharge generators with no inputs (HARD-CODED)
			// so this WHOLE MODULE will only apply in that case.
			// but you can still add the generic module key/values.
			
			effScalar = 245000
			effPower = 0.5
			//end special handling
		}
		ModuleEnviroSensor
		{
			costAdd = 100
		}
	}
	
	RESOURCECOST
	{
		//all cost per unit: cost applies to amount, tank to maxAmount
		AblativeShielding
		{
			cost = 4
			tank = 1
		}
		ElectricCharge
		{
			cost = 0.2
			tank = 1.0
		}
		LiquidFuel
		{
			cost = 4
			tank = 0.01
		}
		Oxidizer
		{
			cost = 10
			tank = 0.03
		}
		SolidFuel
		{
			cost = 5
			tank = 0.3
		}
		MonoPropellant
		{
			cost = 17 // as UDMH, should be 99 (!)
			tank = 1 // as UDMH, toxic.
		}
		XenonGas
		{
			cost = 10
			tank = 0.4
		}
		// MFS Fuels
		// actual cost per mT * 25
		// so way more than IRL, since K's are on the order of $1000
		LiquidOxygen
		{
			cost = 4
			tank = 3
		}
		LiquidH2
		{
			cost = 19
			tank = 4
		}
		N2O4
		{
			cost = 7 // should be 27
			tank = 1
		}
		MMH
		{
			cost = 50 // should be 300 if large-scale production; 2250 (!) in actuality
			// But as it's the MFSC standin for all hypergolic fuels, we consider 300.
			// (and divide by 6 as other hypergolics.)
			tank = 1
		}
		Hydrazine
		{
			cost = 28 // should be 1067 (!) in actuality, or 169 in large-scale prod.
			tank = 1
		}
		
		// Life Support
		Food
		{
			cost = 1
			tank = 0
		}
		Water
		{
			cost = 0.25
			tank = 0.1
		}
		Oxygen
		{
			cost = 4
			tank = 10 // scrubbers
		}
	}
}